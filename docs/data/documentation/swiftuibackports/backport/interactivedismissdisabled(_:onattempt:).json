{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"interactiveDismissDisabled"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isDisabled"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"onAttempt"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":"\n"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"isDisabled","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A Boolean value that indicates whether to"},{"type":"text","text":" "},{"type":"text","text":"prevent nonprogrammatic dismissal of the containing view hierarchy"},{"type":"text","text":" "},{"type":"text","text":"when presented in a sheet or popover."}]}]},{"name":"onAttempt","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that will be called when an interactive dismiss attempt occurs."},{"type":"text","text":" "},{"type":"text","text":"You can use this as an opportunity to present an confirmation or prompt to the user."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Users can dismiss certain kinds of presentations using built-in"},{"type":"text","text":" "},{"type":"text","text":"gestures. In particular, a user can dismiss a sheet by dragging it down,"},{"type":"text","text":" "},{"type":"text","text":"or a popover by clicking or tapping outside of the presented view. Use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"interactiveDismissDisabled(_:)"},{"type":"text","text":" modifier to conditionally prevent"},{"type":"text","text":" "},{"type":"text","text":"this kind of dismissal. You typically do this to prevent the user from"},{"type":"text","text":" "},{"type":"text","text":"dismissing a presentation before providing needed data or completing"},{"type":"text","text":" "},{"type":"text","text":"a required action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, suppose you have a view that displays a licensing"},{"type":"text","text":" "},{"type":"text","text":"agreement that the user must acknowledge before continuing:"}]},{"type":"codeListing","syntax":null,"code":["struct TermsOfService: View {","    @Binding var areTermsAccepted: Bool","    @Environment(\\.backportDismiss) private var dismiss","","    var body: some View {","        Form {","            Text(\"License Agreement\")","                .font(.title)","            Text(\"Terms and conditions go here.\")","            Button(\"Accept\") {","                areTermsAccepted = true","                dismiss()","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you present this view in a sheet, the user can dismiss it by either"},{"type":"text","text":" "},{"type":"text","text":"tapping the button — which calls "},{"type":"codeVoice","code":"EnvironmentValues\/backportDismiss"},{"type":"text","text":" "},{"type":"text","text":"from its "},{"type":"codeVoice","code":"action"},{"type":"text","text":" closure — or by dragging the sheet down. To"},{"type":"text","text":" "},{"type":"text","text":"ensure that the user accepts the terms by tapping the button,"},{"type":"text","text":" "},{"type":"text","text":"disable interactive dismissal, conditioned on the "},{"type":"codeVoice","code":"areTermsAccepted"},{"type":"text","text":" "},{"type":"text","text":"property:"}]},{"type":"codeListing","syntax":null,"code":["struct ContentView: View {","    @State private var isSheetPresented = false","    @State private var areTermsAccepted = false","","    var body: some View {","        Button(\"Use Service\") {","            isSheetPresented = true","        }","        .sheet(isPresented: $isSheetPresented) {","            TermsOfService()","                .backport.interactiveDismissDisabled(!areTermsAccepted)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply the modifier to any view in the sheet’s view hierarchy,"},{"type":"text","text":" "},{"type":"text","text":"including to the sheet’s top level view, as the example demonstrates,"},{"type":"text","text":" "},{"type":"text","text":"or to any child view, like the "},{"type":"codeVoice","code":"Form"},{"type":"text","text":" or the Accept "},{"type":"codeVoice","code":"Button"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The modifier has no effect on programmatic dismissal, which you can"},{"type":"text","text":" "},{"type":"text","text":"invoke by updating the "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" that controls the presentation, or"},{"type":"text","text":" "},{"type":"text","text":"by calling the environment’s "},{"type":"codeVoice","code":"EnvironmentValues\/backportDismiss"},{"type":"text","text":" action."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This modifier currently has no effect on macOS, tvOS or watchOS."}]}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:onattempt:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:onAttempt:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Conditionally prevents interactive dismissal of a popover or a sheet. In addition, provides fine-grained control over the dismissal"}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"interactiveDismissDisabled(_:onAttempt:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"interactiveDismissDisabled"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onAttempt"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"symbolKind":"method","externalID":"s:16SwiftUIBackports8BackportVAA0A2UI4ViewRzlE26interactiveDismissDisabled_9onAttemptQrSb_yyctF","extendedModule":"SwiftUIBackports","modules":[{"name":"SwiftUIBackports"}]},"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/interactiveDismissDisabled(_:onAttempt:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"interactiveDismissDisabled(_:onAttempt:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"interactiveDismissDisabled"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onAttempt"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Conditionally prevents interactive dismissal of a popover or a sheet. In addition, provides fine-grained control over the dismissal"}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:onAttempt:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:onattempt:)"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"role":"collection","title":"SwiftUIBackports","abstract":[],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","type":"topic","url":"\/documentation\/swiftuibackports"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"role":"symbol","title":"Backport","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"type":"text","text":" "},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport"}}}