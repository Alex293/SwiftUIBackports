{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":">("},{"kind":"externalParam","text":"alignment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Alignment","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":" = .center, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"content"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":"\n"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A view that uses the specified content as a foreground."}]}]},{"kind":"parameters","parameters":[{"name":"alignment","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The alignment that the modifier uses to position the"},{"type":"text","text":" "},{"type":"text","text":"implicit "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":" that groups the foreground views. The default"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Alignment\/center"},{"type":"text","text":"."}]}]},{"name":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewBuilder"},{"type":"text","text":" that you use to declare the views to"},{"type":"text","text":" "},{"type":"text","text":"draw in front of this view, stacked in the order that you list them."},{"type":"text","text":" "},{"type":"text","text":"The last view that you list appears at the front of the stack."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this modifier to place one or more views in front of another view."},{"type":"text","text":" "},{"type":"text","text":"For example, you can place a group of stars on a "},{"type":"codeVoice","code":"RoundedRectangle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["RoundedRectangle(cornerRadius: 8)","    .frame(width: 200, height: 100)","    .overlay(alignment: .topLeading) { Star(color: .red) }","    .overlay(alignment: .topTrailing) { Star(color: .yellow) }","    .overlay(alignment: .bottomLeading) { Star(color: .green) }","    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above assumes that you’ve defined a "},{"type":"codeVoice","code":"Star"},{"type":"text","text":" view with a"},{"type":"text","text":" "},{"type":"text","text":"parameterized color:"}]},{"type":"codeListing","syntax":null,"code":["struct Star: View {","    var color = Color.yellow","","    var body: some View {","        Image(systemName: \"star.fill\")","            .foregroundStyle(color)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By setting different "},{"type":"codeVoice","code":"alignment"},{"type":"text","text":" values for each modifier, you make the"},{"type":"text","text":" "},{"type":"text","text":"stars appear in different places on the rectangle:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"View-overlay-2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you specify more than one view in the "},{"type":"codeVoice","code":"content"},{"type":"text","text":" closure, the modifier"},{"type":"text","text":" "},{"type":"text","text":"collects all of the views in the closure into an implicit "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"taking them in order from back to front. For example, you can place a"},{"type":"text","text":" "},{"type":"text","text":"star and a "},{"type":"codeVoice","code":"Circle"},{"type":"text","text":" on a field of "},{"type":"codeVoice","code":"ShapeStyle\/blue"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both the overlay modifier and the implicit "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":" composed from the"},{"type":"text","text":" "},{"type":"text","text":"overlay content — the circle and the star — use a default"},{"type":"text","text":" "},{"type":"codeVoice","code":"Alignment\/center"},{"type":"text","text":" alignment. The star appears centered on the circle,"},{"type":"text","text":" "},{"type":"text","text":"and both appear as a composite view centered in front of the square:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"View-overlay-3"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you specify an alignment for the overlay, it applies to the implicit"},{"type":"text","text":" "},{"type":"text","text":"stack rather than to the individual views in the closure. You can see"},{"type":"text","text":" "},{"type":"text","text":"this if you add the "},{"type":"codeVoice","code":"Alignment\/bottom"},{"type":"text","text":" alignment:"}]},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The circle and the star move down as a unit to align the stack’s bottom"},{"type":"text","text":" "},{"type":"text","text":"edge with the bottom edge of the square, while the star remains"},{"type":"text","text":" "},{"type":"text","text":"centered on the circle:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"View-overlay-3a"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To control the placement of individual items inside the "},{"type":"codeVoice","code":"content"},{"type":"text","text":" "},{"type":"text","text":"closure, either use a different overlay modifier for each item, as the"},{"type":"text","text":" "},{"type":"text","text":"earlier example of stars in the corners of a rectangle demonstrates, or"},{"type":"text","text":" "},{"type":"text","text":"add an explicit "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":" inside the content closure with its own"},{"type":"text","text":" "},{"type":"text","text":"alignment:"}]},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        ZStack(alignment: .bottom) {","            Circle()","                .frame(width: 100, height: 100)","            Star()","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The stack alignment ensures that the star’s bottom edge aligns with the"},{"type":"text","text":" "},{"type":"text","text":"circle’s, while the overlay aligns the composite view with the square:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"View-overlay-4"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can achieve layering without an overlay modifier by putting both the"},{"type":"text","text":" "},{"type":"text","text":"modified view and the overlay content into a "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":". This can"},{"type":"text","text":" "},{"type":"text","text":"produce a simpler view hierarchy, but changes the layout priority that"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI applies to the views. Use the overlay modifier when you want the"},{"type":"text","text":" "},{"type":"text","text":"modified view to dominate the layout."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to specify a "},{"type":"codeVoice","code":"ShapeStyle"},{"type":"text","text":" like a "},{"type":"codeVoice","code":"Color"},{"type":"text","text":" or a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Material"},{"type":"text","text":" as the overlay, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"View\/overlay(_:ignoresSafeAreaEdges:)"},{"type":"text","text":" instead. To specify a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Shape"},{"type":"text","text":", use "},{"type":"codeVoice","code":"View\/overlay(_:in:fillStyle:)"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Layers the views that you specify in front of this view."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"overlay(alignment:_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":">("},{"kind":"externalParam","text":"alignment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Alignment","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"symbolKind":"method","externalID":"s:16SwiftUIBackports8BackportVAA0A2UI4ViewRzlE7overlay9alignment_QrAD9AlignmentV_qd__yXEtAdERd__lF","extendedModule":"SwiftUIBackports","modules":[{"name":"SwiftUIBackports"}]},"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/overlay(alignment:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"overlay(alignment:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":">("},{"kind":"externalParam","text":"alignment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Alignment","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Layers the views that you specify in front of this view."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"role":"symbol","title":"Backport","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"type":"text","text":" "},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"role":"collection","title":"SwiftUIBackports","abstract":[],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","type":"topic","url":"\/documentation\/swiftuibackports"}}}