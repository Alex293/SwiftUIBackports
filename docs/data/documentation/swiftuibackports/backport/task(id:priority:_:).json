{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":" = .userInitiated, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" @"},{"kind":"typeIdentifier","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"},{"kind":"text","text":"\n"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A view that runs the specified action asynchronously when"},{"type":"text","text":" "},{"type":"text","text":"the view appears, or restarts the task with the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" value changes."}]}]},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to observe for changes. The value must conform"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}]}]},{"name":"priority","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The task priority to use when creating the asynchronous"},{"type":"text","text":" "},{"type":"text","text":"task. The default priority is "},{"type":"codeVoice","code":".userInitiated"}]}]},{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that SwiftUI calls as an asynchronous task"},{"type":"text","text":" "},{"type":"text","text":"when the view appears. SwiftUI automatically cancels the task"},{"type":"text","text":" "},{"type":"text","text":"if the view disappears before the action completes. If the"},{"type":"text","text":" "},{"type":"codeVoice","code":"id"},{"type":"text","text":" value changes, SwiftUI cancels and restarts the task."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method behaves like "},{"type":"codeVoice","code":"View\/task(priority:_:)"},{"type":"text","text":", except that it also"},{"type":"text","text":" "},{"type":"text","text":"cancels and recreates the task when a specified value changes. To detect"},{"type":"text","text":" "},{"type":"text","text":"a change, the modifier tests whether a new value for the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"equals the previous value. For this to work,"},{"type":"text","text":" "},{"type":"text","text":"the value’s type must conform to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you define an equatable "},{"type":"codeVoice","code":"Server"},{"type":"text","text":" type that posts custom"},{"type":"text","text":" "},{"type":"text","text":"notifications whenever its state changes — for example, from "},{"type":"emphasis","inlineContent":[{"type":"text","text":"signed"},{"type":"text","text":" "},{"type":"text","text":"out"}]},{"type":"text","text":" to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"signed in"}]},{"type":"text","text":" — you can use the task modifier to update"},{"type":"text","text":" "},{"type":"text","text":"the contents of a "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" view to reflect the state of the"},{"type":"text","text":" "},{"type":"text","text":"currently selected server:"}]},{"type":"codeListing","syntax":null,"code":["Text(status ?? \"Signed Out\")","    .task(id: server) {","        let sequence = NotificationCenter.default.notifications(","            named: .didChangeStatus,","            object: server)","        for try await notification in sequence {","            status = notification.userInfo[\"status\"] as? String","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Elsewhere, the server defines a custom "},{"type":"codeVoice","code":"didUpdateStatus"},{"type":"text","text":" notification:"}]},{"type":"codeListing","syntax":null,"code":["extension NSNotification.Name {","    static var didUpdateStatus: NSNotification.Name {","        NSNotification.Name(\"didUpdateStatus\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The server then posts a notification of this type whenever its status"},{"type":"text","text":" "},{"type":"text","text":"changes, like after the user signs in:"}]},{"type":"codeListing","syntax":null,"code":["let notification = Notification(","    name: .didUpdateStatus,","    object: self,","    userInfo: [\"status\": \"Signed In\"])","NotificationCenter.default.post(notification)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The task attached to the "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" view gets and displays the status"},{"type":"text","text":" "},{"type":"text","text":"value from the notification’s user information dictionary. When the user"},{"type":"text","text":" "},{"type":"text","text":"chooses a different server, SwiftUI cancels the task and creates a new"},{"type":"text","text":" "},{"type":"text","text":"one, which then starts waiting for notifications from the new server."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Adds a task to perform when this view appears or when a specified"},{"type":"text","text":" "},{"type":"text","text":"value changes."}],"kind":"symbol","metadata":{"modules":[{"name":"SwiftUIBackports"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"task(id:priority:_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"symbolKind":"method","externalID":"s:16SwiftUIBackports8BackportVAA0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbScMYcctSQRd__lF","extendedModule":"SwiftUIBackports","platforms":[]},"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"role":"symbol","title":"Backport","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"type":"text","text":" "},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/task(id:priority:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"task(id:priority:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Adds a task to perform when this view appears or when a specified"},{"type":"text","text":" "},{"type":"text","text":"value changes."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"role":"collection","title":"SwiftUIBackports","abstract":[],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","type":"topic","url":"\/documentation\/swiftuibackports"}}}